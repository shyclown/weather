{"version":3,"sources":["utils/resources/placeDetails.ts","utils/resources/getCurrentLocation.ts","utils/redux/actions/places.ts","utils/resources/getCurrentWeather.tsx","components/FirstPage.tsx","utils/resources/localStorage.ts","App.tsx","serviceWorker.js","utils/redux/reducers/places.ts","utils/redux/reducers/index.ts","utils/redux/store.ts","index.tsx"],"names":["getPlaceDetails","typeOfSearchedProperty","searchedValue","Promise","resolve","rejects","google","maps","Geocoder","geocode","results","status","GeocoderStatus","OK","latitude","geometry","location","lat","longitude","lng","console","log","getPlaceDetailsForPlaceId","placeId","getCurrentLocation","reject","navigator","geolocation","getCurrentPosition","error","timeout","maximumAge","LOAD_WEATHER","LOAD_WEATHER_ERROR","LOAD_WEATHER_SUCCESS","SET_LOCAL_WEATHER","SET_FAVORITE_WEATHER","UNSET_FAVORITE_WEATHER","SET_CURRENT_WEATHER","setCurrentWeather","id","dispatch","type","payload","loadWeatherAction","local","getState","cache","localStorage","getItem","parsedCache","JSON","parse","weather","woeid","current","long","axios","then","res","data","getLocationWeather","response","setItem","stringify","places","useStyles","makeStyles","page","borderTop","buttonStyle","border","padding","marginLeft","color","fontWeight","backgroundColor","transition","cursor","WeatherForLocation","props","weatherLocation","small","smaller","t","useTranslation","placesStore","useSelector","state","favorite","Object","values","classes","useDispatch","style","display","marginTop","marginRight","borderRadius","justifyContent","margin","onClick","title","parent","className","includes","unsetFavoriteWeather","setFavoriteWeather","gridTemplateColumns","width","consolidated_weather","map","day","index","date","moment","applicable_date","format","fontSize","parseInt","the_temp","alt","weather_state_name","src","weather_state_abbr","min_temp","max_temp","wind_direction_compass","wind_speed","humidity","FirstPage","weathers","useEffect","key","value","saveObject","useState","setValue","flexDirection","selectProps","onChange","place","place_id","details","Array","isArray","onLoadFailed","autocompletionRequest","types","position","coords","filter","w","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialState","view","loadingPlace","errorPlace","loadObject","placesReducer","action","f","combineReducers","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","rootReducer","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3009f67a.chunk.js","sourcesContent":["\r\nconst getPlaceDetails = (typeOfSearchedProperty : 'location' | 'placeId', searchedValue : string | {lat: number, lng: number}) => {\r\n    return new Promise((resolve, rejects) => {\r\n        const geocoder = new google.maps.Geocoder();\r\n        geocoder.geocode({\r\n            [typeOfSearchedProperty]: searchedValue\r\n        }, function(results, status) {\r\n\r\n            if (status === google.maps.GeocoderStatus.OK) {\r\n                let latitude = results?.[0].geometry.location.lat();\r\n                let longitude = results?.[0].geometry.location.lng();\r\n\r\n                console.log(latitude, longitude);\r\n                resolve(results);\r\n            }\r\n            else {\r\n                rejects(\"Failed to load geometry for location.\");\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\n// Possibly useful?\r\nexport const getPlaceDetailsForLatLng = (latLng: {lat: number, lng: number}) => {\r\n    return getPlaceDetails(\"location\", latLng);\r\n}\r\n\r\nexport const getPlaceDetailsForPlaceId = (placeId: string) => {\r\n    return getPlaceDetails(\"placeId\", placeId);\r\n}\r\n\r\nexport default getPlaceDetailsForPlaceId;","\r\nconst getCurrentLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                resolve,\r\n                (error) => {reject(\"Could not access position.\"); },\r\n                {\r\n                    timeout: 5000,\r\n                    maximumAge: 0\r\n                });\r\n        } else {\r\n            reject(\"Geolocation is not supported by this browser.\")\r\n        }\r\n    })\r\n}\r\n\r\nexport default getCurrentLocation;","\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStore} from \"../../redux\";\r\nimport {getLocationWeather} from \"../../resources/getCurrentWeather\";\r\n\r\nexport const LOAD_WEATHER = \"LOAD_WEATHER\";\r\nexport const LOAD_WEATHER_ERROR = \"LOAD_WEATHER_ERROR\";\r\nexport const LOAD_WEATHER_SUCCESS = \"LOAD_WEATHER_SUCCESS\";\r\n\r\nexport const SET_LOCAL_WEATHER = \"SET_LOCAL_WEATHER\";\r\nexport const SET_FAVORITE_WEATHER = \"SET_FAVORITE_WEATHER\";\r\n\r\nexport const UNSET_FAVORITE_WEATHER = \"UNSET_FAVORITE_WEATHER\";\r\nexport const SET_CURRENT_WEATHER = \"SET_CURRENT_WEATHER\";\r\n\r\n\r\nexport const setCurrentWeather = (id: number) => (\r\n    dispatch : Dispatch\r\n) => {\r\n    dispatch({\r\n        type: SET_CURRENT_WEATHER, payload: {\r\n            id: id,\r\n        }\r\n    });\r\n}\r\n\r\nexport const setLocalWeather = (id: number) => (\r\n    dispatch : Dispatch\r\n) => {\r\n    dispatch({\r\n        type: SET_LOCAL_WEATHER, payload: {\r\n            id: id,\r\n        }\r\n    });\r\n}\r\n\r\nexport const setFavoriteWeather = (id: number)  => (\r\n    dispatch : Dispatch\r\n) => {\r\n    dispatch({\r\n        type: SET_FAVORITE_WEATHER, payload: {\r\n            id: id\r\n        }\r\n    });\r\n}\r\n\r\nexport const unsetFavoriteWeather = (id: number) => (\r\n    dispatch : Dispatch\r\n) => {\r\n    dispatch({\r\n        type: UNSET_FAVORITE_WEATHER, payload: {\r\n            id: id\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const loadWeatherAction = (lat: number, lng: number, local: boolean) => (\r\n    dispatch : Dispatch,\r\n    getState : () => AppStore\r\n) => {\r\n\r\n        console.log(\"loadWeatherAction\", getState());\r\n        return new Promise((resolve, reject) => {\r\n\r\n                dispatch({type: LOAD_WEATHER});\r\n\r\n                const cache = localStorage.getItem(\"weather\");\r\n                const parsedCache = cache && JSON.parse(cache);\r\n\r\n                if(parsedCache?.[lat+\",\"+lng]) {\r\n                    const weather = parsedCache[lat+\",\"+lng];\r\n\r\n                    dispatch({\r\n                        type: LOAD_WEATHER_SUCCESS, payload: {\r\n                            id: weather.woeid as number,\r\n                            current: weather.woeid as number,\r\n                            local: local ? weather.woeid as number : null,\r\n                            weather: weather\r\n                        }\r\n                    });\r\n                    resolve(weather);\r\n                } else {\r\n                    //\r\n                    getLocationWeather(lat, lng).then(\r\n                        (response) => {\r\n\r\n                            const weather = response.data;\r\n\r\n                            localStorage.setItem(\"weather\", JSON.stringify({\r\n                                ...getState().places.weather,\r\n                                [lat+\",\"+lng]: weather\r\n                            }));\r\n\r\n                            dispatch({\r\n                                type: LOAD_WEATHER_SUCCESS, payload: {\r\n                                    id: response.data.woeid as number,\r\n                                    current: weather.woeid as number,\r\n                                    local: local ? weather.woeid as number : null,\r\n                                    weather: response.data\r\n                                }\r\n                            });\r\n\r\n                            resolve(response)\r\n                        },\r\n                        (error) => {\r\n                            dispatch({type: LOAD_WEATHER_ERROR});\r\n                            reject(error);\r\n                        }\r\n                    )\r\n                }\r\n\r\n\r\n            }\r\n\r\n        );\r\n\r\n}","import axios from \"axios\";\r\n\r\nexport const getLocationWeather = (lat: number, long: number) => {\r\n    return axios(\"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?lattlong=\"+lat+\",\"+long+\"\").then(res =>\r\n        axios(\"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/\"+ res.data[0].woeid)\r\n    );\r\n}\r\n\r\n\r\n","import * as React from \"react\";\r\nimport {FunctionComponent, useEffect, useState} from \"react\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport {AppStore} from \"../utils/redux\";\r\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\r\nimport getPlaceDetailsForPlaceId from \"../utils/resources/placeDetails\";\r\nimport getCurrentLocation from \"../utils/resources/getCurrentLocation\";\r\nimport {\r\n    loadWeatherAction,\r\n    setCurrentWeather,\r\n    setFavoriteWeather,\r\n    unsetFavoriteWeather\r\n} from \"utils/redux/actions/places\";\r\nimport {saveObject} from \"../utils/resources/localStorage\";\r\n\r\ntype Props = {}\r\n\r\nconst useStyles = makeStyles({\r\n    page: {\r\n        borderTop: \"1px solid #999\",\r\n    },\r\n\r\n\r\n    buttonStyle: {\r\n        border: \"none\",\r\n        padding: \"8px\",\r\n        marginLeft: \"8px\",\r\n        color: \"#09F\",\r\n        fontWeight: \"bold\",\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        transition: \"all 500ms\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#EAEAEA\",\r\n            cursor: \"pointer\",\r\n            color: \"black\",\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst WeatherForLocation: FunctionComponent<{\r\n    weatherLocation: { [key: string]: any };\r\n    small?: boolean | undefined | null;\r\n    smaller?: boolean | undefined | null;\r\n}> = props => {\r\n\r\n    const {weatherLocation, small, smaller} = props;\r\n\r\n    const {t} = useTranslation();\r\n    const placesStore = useSelector((state: AppStore) => state.places);\r\n\r\n    const favorite = Object.values(placesStore.favorite);\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const id = weatherLocation.woeid as number;\r\n\r\n    return <div key={weatherLocation.woeid} style={\r\n        {\r\n            padding: \"8px\",\r\n            display: small ? \"inline-block\" : \"block\",\r\n            backgroundColor: \"white\",\r\n            marginTop: \"8px\",\r\n            marginRight: \"8px\",\r\n            borderRadius: \"8px\",\r\n            border: \"solid 1px #EAEAEA\"\r\n        }\r\n    }>\r\n\r\n        <div style={{display: \"flex\", justifyContent: \"space-between\", padding: \"8px\"}}>\r\n\r\n\r\n            <div style={{display: \"flex\"}}>\r\n                <h3 style={{padding: \"0px\", margin: \"0px\"}} onClick={() => dispatch(setCurrentWeather(id))}>\r\n                    {weatherLocation.title} / {weatherLocation.parent?.title}\r\n                </h3>\r\n                <button className={classes.buttonStyle} onClick={() => dispatch(setCurrentWeather(id))}>\r\n                    Open\r\n                </button>\r\n            </div>\r\n\r\n            {favorite.includes(id) ?\r\n                <button className={classes.buttonStyle} onClick={() => dispatch(unsetFavoriteWeather(id))}>\r\n                    {t(\"Remove from Favorites\")}\r\n                </button> :\r\n                <button className={classes.buttonStyle} onClick={() => dispatch(setFavoriteWeather(id))}>\r\n                    {t(\"Add to favorites\")}\r\n                </button>}\r\n        </div>\r\n\r\n        <div style={{display: \"grid\", gridTemplateColumns: \"repeat( auto-fill, minmax(250px, 1fr) )\", width: \"100%\"}}>\r\n            {\r\n                !smaller && weatherLocation.consolidated_weather.map((day: { [key: string]: any }, index: number) => {\r\n                    const momentDate = moment(day.applicable_date, \"YYYY-MM-DD\")\r\n                    const date = momentDate.format(\"D MMM YYYY\");\r\n                    return ((small && index < 3) || !small) ? <div\r\n                        key={index}\r\n                        style={{\r\n                            display: \"block\",\r\n                            padding: \"8px\",\r\n                            margin: \"8px\",\r\n                            borderRadius: \"8px\",\r\n                            border: \"solid 1px #EAEAEA\"\r\n                        }}\r\n                    >\r\n                        <div>{date}</div>\r\n                        {\r\n                            !small ? <div>\r\n                                <div style={{display: \"flex\", justifyContent: \"center\", padding: \"4px\"}}>\r\n                                    <img alt={day.weather_state_name}\r\n                                        src={\"https://www.metaweather.com/static/img/weather/png/64/\" + day.weather_state_abbr + \".png\"}/>\r\n                                </div>\r\n                                <div style={{fontSize: \"16px\"}}>\r\n                                    <strong style={{fontSize: \"20px\"}}>\r\n                                        <div>{parseInt(day.the_temp)} °C</div>\r\n                                    </strong>\r\n                                    <div style={{fontSize: \"12px\", backgroundColor: \"#EAEAEA\", padding: \"4px\"}}>\r\n\r\n                                        <div>Min: {parseInt(day.min_temp)} °C</div>\r\n                                        <div>Max: {parseInt(day.max_temp)} °C</div>\r\n                                    </div>\r\n                                    <div>Weather: {day.weather_state_name}</div>\r\n                                    <div>Wind direction: {day.wind_direction_compass}</div>\r\n                                    <div>Wind speed: {parseInt(day.wind_speed)} m/s</div>\r\n                                    <div>Humidity: {parseInt(day.humidity)} %</div>\r\n                                </div>\r\n                            </div> : <div>\r\n                                <strong style={{fontSize: \"20px\"}}>\r\n                                    <div>{parseInt(day.the_temp)} °C</div>\r\n                                </strong>\r\n                                <div style={{display: \"flex\", justifyContent: \"center\", padding: \"4px\"}}>\r\n                                    <img width={45} alt={day.weather_state_name}\r\n                                         src={\"https://www.metaweather.com/static/img/weather/png/64/\" + day.weather_state_abbr + \".png\"}/>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div> : null\r\n                })\r\n            }\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport const FirstPage: FunctionComponent<Props> = (\r\n    props\r\n) => {\r\n\r\n    const {t} = useTranslation();\r\n    const placesStore = useSelector((state: AppStore) => state.places);\r\n    const weathers: any[] = Object.values(placesStore.weather);\r\n\r\n    useEffect(() => {\r\n        saveObject(\"places\", placesStore);\r\n    }, [placesStore])\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const [value, setValue] = useState<null | { [key: string]: any }>(null);\r\n\r\n\r\n    return <div className={classes.page}>\r\n\r\n\r\n        <div style={{\r\n            display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\",\r\n            backgroundColor: \"#4c85cd\",\r\n            padding: \"8px\", color: \"white\"\r\n        }}>\r\n\r\n            <div style={{fontSize: \"24px\"}}>{t(\"Weather\")}</div>\r\n            <div style={{width: \"350px\", color: \"black\"}}>\r\n                <GooglePlacesAutocomplete\r\n                    selectProps={{\r\n                        value,\r\n                        onChange: (place: { [key: string]: any }) => {\r\n                            getPlaceDetailsForPlaceId(place.value.place_id).then((details) => {\r\n                                if (Array.isArray(details)) {\r\n                                    let latitude = details?.[0].geometry.location.lat();\r\n                                    let longitude = details?.[0].geometry.location.lng();\r\n                                    dispatch(loadWeatherAction(latitude, longitude, false));\r\n                                }\r\n\r\n                            });\r\n                            setValue(place)\r\n                        },\r\n                    }}\r\n                    onLoadFailed={(error) => (\r\n                        console.error(\"Could not inject Google script\", error)\r\n                    )}\r\n                    autocompletionRequest={{\r\n                        types: ['(cities)'],\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <button onClick={() => {\r\n                getCurrentLocation().then((position: any) => {\r\n                    dispatch(loadWeatherAction(position.coords.latitude, position.coords.longitude, true));\r\n                });\r\n\r\n            }}>Current Location\r\n            </button>\r\n        </div>\r\n        <div style={{backgroundColor: \"#ccdbdb\"}}>\r\n            <div style={{padding: \"16px\"}}>\r\n\r\n                <h2>Selected</h2>\r\n                {\r\n                    weathers && weathers.filter(w => w.woeid === placesStore.current)?.map?.((weatherLocation: any) =>\r\n                        <WeatherForLocation\r\n                            weatherLocation={weatherLocation}\r\n                            key={weatherLocation.woeid}\r\n                        />)\r\n                }\r\n\r\n            </div>\r\n            <div style={{padding: \"16px\"}}>\r\n                <h2>Favorite</h2>\r\n                {\r\n                    weathers && weathers.filter(w => placesStore.favorite.includes(w.woeid))?.map((weatherLocation: any) =>\r\n                        <WeatherForLocation small\r\n                                            weatherLocation={weatherLocation}\r\n                                            key={weatherLocation.woeid}\r\n                        />)\r\n                }\r\n            </div>\r\n            <div style={{padding: \"16px\"}}>\r\n                <h2>Recent</h2>\r\n                {\r\n                    weathers && weathers.filter(w => !placesStore.favorite.includes(w.woeid) && (w.woeid !== placesStore.current))?.map((weatherLocation: any) =>\r\n                        <WeatherForLocation smaller\r\n                                            weatherLocation={weatherLocation}\r\n                                            key={weatherLocation.woeid}\r\n                        />)\r\n                }\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default FirstPage;","export const saveObject = (key: string, value: {[key: string]: any}) => {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const loadObject = (key: string) => {\r\n    const value = localStorage.getItem(key);\r\n    return value ? JSON.parse(value) : {};\r\n}","/*\r\n    React Frontend Boilerplate\r\n    Copyright (C) 2021  Roman Moravčík\r\n*/\r\n\r\nimport * as React from 'react';\r\nimport './App.css';\r\nimport FirstPage from \"./components/FirstPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <FirstPage/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import {\r\n    LOAD_WEATHER,\r\n    LOAD_WEATHER_SUCCESS,\r\n    LOAD_WEATHER_ERROR, SET_LOCAL_WEATHER, SET_FAVORITE_WEATHER, UNSET_FAVORITE_WEATHER, SET_CURRENT_WEATHER,\r\n} from \"../actions/places\";\r\n\r\nimport {PayloadAction} from \"../../redux\";\r\nimport {loadObject} from \"../../resources/localStorage\";\r\n\r\nexport type PlacesState = {\r\n    view: null,\r\n    current: null,\r\n    local: number | null,\r\n    favorite: number[],\r\n    places: [],\r\n    weather: {}\r\n    loadingPlace: boolean,\r\n    errorPlace: boolean,\r\n}\r\n\r\nconst initialState: PlacesState = {\r\n    view: null,\r\n    current: null,\r\n    local: null,\r\n    favorite: [],\r\n    places: [],\r\n    weather: {},\r\n    loadingPlace: false,\r\n    errorPlace: false,\r\n    ...loadObject(\"places\"),\r\n}\r\n\r\nconst placesReducer = (\r\n    state = initialState,\r\n    action: Partial<PayloadAction<{\r\n        id: number,\r\n        current: number,\r\n        local: number,\r\n        weather: {[key: string]: any},\r\n    }>>\r\n) => {\r\n    switch (action.type) {\r\n\r\n        case SET_CURRENT_WEATHER: return {\r\n            ...state,\r\n            current: action.payload?.id\r\n        };\r\n\r\n        case SET_LOCAL_WEATHER: return {\r\n            ...state,\r\n            local: action.payload?.id\r\n        };\r\n\r\n        case SET_FAVORITE_WEATHER: return {\r\n            ...state,\r\n            favorite: [...state.favorite, action.payload?.id],\r\n        };\r\n\r\n        case UNSET_FAVORITE_WEATHER: return {\r\n            ...state,\r\n            favorite: state.favorite.filter(f => f !== action.payload?.id),\r\n        };\r\n\r\n        case LOAD_WEATHER: return {\r\n            ...state,\r\n            loadingPlace: true,\r\n            errorPlace: false,\r\n        };\r\n\r\n        case LOAD_WEATHER_SUCCESS: return action.payload ? {\r\n            ...state,\r\n            weather: {\r\n                ...state.weather,\r\n                [action.payload.id]: action.payload.weather\r\n            },\r\n            current: (action.payload.current || state.current),\r\n            local: (action.payload.local || state.local),\r\n            loadingPlace: false,\r\n        } : state;\r\n\r\n\r\n        case LOAD_WEATHER_ERROR: return {\r\n            ...state,\r\n            loadingPlace: false,\r\n            errorPlace: true,\r\n        };\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default placesReducer;","import {combineReducers} from \"redux\";\r\n\r\nimport places from \"./places\";\r\n\r\nexport default combineReducers({\r\n    places,\r\n});","import {createStore, applyMiddleware, compose, Store} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?: typeof compose\r\n    }\r\n}\r\n\r\nlet composeEnhancers;\r\n\r\nif (\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n) {\r\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n} else {\r\n    composeEnhancers = compose;\r\n}\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk),\r\n    // other store enhancers if any\r\n);\r\n\r\nconst store: Store = createStore(\r\n    rootReducer,\r\n    enhancer\r\n);\r\nexport default store;","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nimport store from \"./utils/redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n        <App />\r\n        </Provider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.register();"],"sourceRoot":""}